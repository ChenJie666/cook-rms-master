{"remainingRequest":"C:\\Users\\CJ\\Desktop\\cook-rms-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\CJ\\Desktop\\cook-rms-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\CJ\\Desktop\\cook-rms-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\CJ\\Desktop\\cook-rms-master\\src\\views\\application\\Voice.vue?vue&type=template&id=958f112e&scoped=true&","dependencies":[{"path":"C:\\Users\\CJ\\Desktop\\cook-rms-master\\src\\views\\application\\Voice.vue","mtime":1596030540078},{"path":"C:\\Users\\CJ\\Desktop\\cook-rms-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\CJ\\Desktop\\cook-rms-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\CJ\\Desktop\\cook-rms-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\CJ\\Desktop\\cook-rms-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}