{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\cook-rms-master(2)\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\cook-rms-master(2)\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\cook-rms-master(2)\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\cook-rms-master(2)\\src\\views\\application\\Voice.vue?vue&type=template&id=958f112e&scoped=true&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\cook-rms-master(2)\\src\\views\\application\\Voice.vue","mtime":1596187388822},{"path":"C:\\Users\\Administrator\\Desktop\\cook-rms-master(2)\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595921340657},{"path":"C:\\Users\\Administrator\\Desktop\\cook-rms-master(2)\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1595921369315},{"path":"C:\\Users\\Administrator\\Desktop\\cook-rms-master(2)\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595921340657},{"path":"C:\\Users\\Administrator\\Desktop\\cook-rms-master(2)\\node_modules\\vue-loader\\lib\\index.js","mtime":1595921369308}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}